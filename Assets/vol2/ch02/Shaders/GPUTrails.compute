#pragma kernel CalcInput

#include "GPUTrails.cginc"

float _Time;
float _UpdateDistanceMin;
uint _TrailNum;

RWStructuredBuffer<Trail> _TrailBuffer;
RWStructuredBuffer<Node> _NodeBuffer;

//Nodeバッファから指定のNodeを取得する
Node getNode(int trailIdx, int nodeIdx)
{
    return _NodeBuffer[toNodeBufIdx(trailIdx, nodeIdx)];
}

void setNode(Node node, int trailIdx, int nodeIdx)
{
    _NodeBuffer[toNodeBufIdx(trailIdx, nodeIdx)] = node;
}

StructuredBuffer<Input> _InputBuffer;

[numthreads(256, 1, 1)]
void CalcInput(uint3 id : SV_DispatchThreadID)
{
    uint trailIdx = id.x;

    //インデックスが全体数より小さかったら
    if(trailIdx < _TrailNum)
    {
        Trail trail = _TrailBuffer[trailIdx];
        Input input = _InputBuffer[trailIdx];

        int currentNodeIdx = trail.currentNodeIdx;

        bool update = true;
        if(trail.currentNodeIdx >= 0) 
        {
            Node node = getNode(trailIdx, currentNodeIdx);

            //インプットの位置と最新のNodeの位置との距離が近ければ更新しない
            float dist = distance(input.position, node.position);
            update = dist > _UpdateDistanceMin;
        }

        if(update)
        {
            Node node;
            node.time = _Time;
            node.position = input.position;

            currentNodeIdx++;
            currentNodeIdx %= _NodeNumPerTrail; //TrailあたりのNode数を超えたら0番目のノードを更新するようにする

            //Nodeバッファに入力の時間と位置を保存
            setNode(node, trailIdx, currentNodeIdx);

            trail.currentNodeIdx = currentNodeIdx;
            _TrailBuffer[trailIdx] = trail;
        }
    }
}